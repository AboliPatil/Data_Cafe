[DEFAULT]
env=local

gcs_base_path = gs://cv-datacafe//Inventory//

bigquery_jar=C:\Users\Ganesh Dabhade\Desktop\retail_project\config_file\spark-bigquery-with-dependencies_2.12-0.27.1.jar
sql_jar=C:\Users\Ganesh Dabhade\Desktop\data_cafe\git\config\mysql-connector-java-8.0.27.jar
pem_file=C:\Users\Ganesh Dabhade\PycharmProjects\Retail_data_platform\json\gcp_json.json
project_id=lyrical-brook-374409
dataset_name=analytics
temporary_gcs_bucket=temp_bucket_bigquery

#tables_run_seq=weekly_sales_analysis,sales_date
tables_run_seq= cus_order_sale_pramotional_offer
is_bigquery_read=True

[weekly_sales_analysis]
table_name=weekly_sales_analysis
dataset_name=analytics
required_input_tables_json=[{"table_name":"sales_fact","dataset_name":"fact_and_dimension","project_id":"evident-ethos-365308"},{"table_name":"customer_dimension","dataset_name":"fact_and_dimension","project_id":"evident-ethos-365308"},{"table_name":"date_dimension","dataset_name":"fact_and_dimension","project_id":"evident-ethos-365308"},{"table_name":"promotion_dimension","dataset_name":"fact_and_dimension","project_id":"evident-ethos-365308"}]
join_query=select dd.WeekOfYear, sf.ItemID, sum(sf.ExtendedAmount) as total_sales from sales_fact as sf join date_dimension dd on sf.BusinessDayDate = dd.BusinessDayDate where sf.PromotionalOfferID_1 is not null group by sf.ItemID, dd.WeekOfYear order by dd.WeekOfYear desc
destination_table=weekly_sales_analysis
transformation=
columns_to_select=WeekOfYear,ItemID,total_sales


[sales_date]
table_name=sales_date
dataset_name=analytics
required_input_tables_json=[{"table_name":"sales_fact","dataset_name":"fact_and_dimension","project_id":"evident-ethos-365308"},{"table_name":"date_dimension","dataset_name":"fact_and_dimension","project_id":"evident-ethos-365308"}]
join_query=select distinct sf.TransactionID, sf.RegularUnitPrice, sf.Quantity, sf.UnitDiscountAmount, sf.UnitCostPrice, sf.Amount_1, sf.NewPrice_1, dd.BusinessDayDate, dd.CalendarYearQuarter, dd.YearMonth, dd.DayOfYear, dd.WeekOfYear from sales_fact as sf join date_dimension dd on sf.BusinessDayDate = dd.BusinessDayDate
destination_table=sales_date
transformation=BusinessDayDate::date::Date,RegularUnitPrice:Quantity::multiply::gross_sales_inter,gross_sales_inter:UnitDiscountAmount::substract::net_sales,NewPrice_1:Quantity::multiply::Cost,net_sales:Cost:100::substractpercent::gross_margin
columns_to_select=Orders,gross_sales,discount,net_sales,average_order_value,gross_margin,Cost,Amount_1,Date,CalendarYearQuarter,YearMonth,DayOfYear,WeekOfYear
aggregation={"groupby_columns":"Date,CalendarYearQuarter,YearMonth,DayOfYear,WeekOfYear", "aggregation_dict":{"Orders":"count,TransactionID","gross_sales":"sum,gross_sales_inter","discount":"sum,UnitDiscountAmount","net_sales":"sum,net_sales","average_order_value":"avg,gross_sales_inter","gross_margin":"avg,gross_margin","Cost":"sum,Cost","Amount_1":"sum,Amount_1"}}
postprocessor=

[Cost_of_goods]
table_name=Cost_of_goods
required_input_tables_json=[{"table_name":"Inventory_fact","dataset_name":"fact_and_dimension","project_id":"lyrical-brook-374409"}]
join_query= select i.* from Inventory_fact i
destination_table=cost_of_good
transformation= ReceivedUnitCount:BeginningValueAmount::multiply::CostOfGood,GrossSalesUnitCount:ReturnUnitCount:CummulativeGrossSalesRetailAmount:CostOfGood::COGsale::COGSalePercent
columns_to_select= CalendarReportingPeriodID,ItemID,FirstReceiptDate,LastReceiptDate,CostOfGood,COGSalePercent

[cus_order_sale_pramotional_offer]
table_name=cus_order_sale_offer
dataset_name=analytics
required_input_tables_json=[{"table_name":"sales_fact","dataset_name":"fact_and_dimension","project_id":"lyrical-brook-374409"}]
join_query=select sf.* from sales_fact as sf
destination_table=cus_order_sale_pramotional_offer
transformation=BusinessDayDate::yearmonth::month_year,BusinessDayDate::date::date,PromotionalOfferID_1::return_same::promoID
columns_to_select= month_year,date,promoID, Orders,gross_sales,Discounts,Net_sales,Average_order_value,Cost,Gross_margin,Gross_profit
#query=select date,month_year, promoID, COUNT(TransactionID) over(partition by date,promoID) as Orders, SUM(RegularUnitPrice * Quantity) over(partition by date,promoID) as gross_sales, SUM(UnitDiscountAmount) over(partition by date,promoID) as Discounts, ((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))- (SUM(UnitDiscountAmount) over(partition by date,promoID))) as Net_sales, ((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))/(COUNT(TransactionID) over(partition by date,promoID))) as Average_order_value, SUM(NewPrice_1 * Quantity) over(partition by date,promoID) as Cost, ((((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))- (SUM(UnitDiscountAmount) over(partition by date,promoID))) - (SUM(NewPrice_1 * Quantity) over(partition by date,promoID)))/ ((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))- (SUM(UnitDiscountAmount) over(partition by date,promoID))))* 100 as Gross_margin, SUM(Amount_1) over(partition by date,promoID) as Gross_profit, Row_number() over(partition by date,promoID order by date) as row_no FROM cus_order_sale_pramotional_offer where Row_number() over(partition by date,promoID order by date)=1
query=select * from (select date,month_year, promoID, COUNT(TransactionID) over(partition by date,promoID) as Orders, SUM(RegularUnitPrice * Quantity) over(partition by date,promoID) as gross_sales, SUM(UnitDiscountAmount) over(partition by date,promoID) as Discounts, ((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))- (SUM(UnitDiscountAmount) over(partition by date,promoID))) as Net_sales, ((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))/(COUNT(TransactionID) over(partition by date,promoID))) as Average_order_value, SUM(NewPrice_1 * Quantity) over(partition by date,promoID) as Cost, ((((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))- (SUM(UnitDiscountAmount) over(partition by date,promoID))) - (SUM(NewPrice_1 * Quantity) over(partition by date,promoID)))/ ((SUM(RegularUnitPrice * Quantity) over(partition by date,promoID))- (SUM(UnitDiscountAmount) over(partition by date,promoID))))* 100 as Gross_margin, SUM(Amount_1) over(partition by date,promoID) as Gross_profit, Row_number() over(partition by date,promoID order by date) as row_no FROM cus_order_sale_pramotional_offer) as sale where sale.row_no=1
